name: Reset
run-name: Reset 
on: 
  schedule:
    - cron: '15 3 * * *'
  workflow_dispatch:
jobs:
  build:
    if: ${{ github.ref_name == vars.PRODUCTION_BRANCH }}
    runs-on: ubuntu-latest
    env:
      VAR_GITHUB_PRODUCTION_BRANCH: ${{ vars.PRODUCTION_BRANCH }} 
      VAR_GITHUB_STAGING_BRANCH: ${{ vars.STAGING_BRANCH }} 
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0      
      - name: Lokalise CLI
        run: curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh
      - name: Delete branches
        run: |
             while read -r branch ; do
              if [[ $branch ]]
              then
                git push origin --delete $branch
              fi
             done < <(git branch -r | grep -v "\/${{ env.VAR_GITHUB_PRODUCTION_BRANCH }}$" | sed 's@.*origin/@@')
      - name: Revert branch [${{ vars.PRODUCTION_BRANCH }}] to ${{ vars.PRODUCTION_BRANCH_RESTORE_COMMIT }} 
        env:
          GH_TOKEN: ${{ github.token }}
          VAR_GITHUB_PRODUCTION_BRANCH_RESTORE_COMMIT: ${{ vars.PRODUCTION_BRANCH_RESTORE_COMMIT }} 
        run: |
             git config --global user.name "${GITHUB_ACTOR}"
             git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
             git branch ${{ env.VAR_GITHUB_PRODUCTION_BRANCH }}-backup
             git reset --hard ${{ env.VAR_GITHUB_PRODUCTION_BRANCH_RESTORE_COMMIT }} 
             git reset --soft ${{ env.VAR_GITHUB_PRODUCTION_BRANCH }}-backup
             if [[ -z $(git status --untracked-files=no --porcelain) ]]
             then
              echo "No changes"
             else
              git commit -m "Revert to ${{ env.VAR_GITHUB_PRODUCTION_BRANCH_RESTORE_COMMIT }}"
              git push origin ${{ env.VAR_GITHUB_PRODUCTION_BRANCH }}
             fi
      - name: Clean Lokalise project [${{ env.VAR_LOKALISE_PROJECT_ID }}]
        env:
          VAR_LOKALISE_API_TOKEN: ${{ secrets.API_TOKEN }}
          VAR_LOKALISE_PROJECT_ID: ${{ vars.PROJECT_ID }}
          VAR_GITHUB_PRODUCTION_BRANCH: ${{ vars.PRODUCTION_BRANCH }} 
          VAR_LOKALISE_PRODUCTION_TAG: ${{ vars.PRODUCTION_TAG }}
        run: |
             while read file 
             do 
                if [ -f $file ]
                then
                    ./bin/lokalise2 --token ${{ env.VAR_LOKALISE_API_TOKEN }} --project-id ${{ env.VAR_LOKALISE_PROJECT_ID }} file upload --file="$file" --lang-iso $(basename $file .json) --replace-modified --include-path --tags ${{ env.VAR_LOKALISE_PRODUCTION_TAG }} --tag-skipped-keys --use-automations=false --cleanup-mode --poll-timeout 60s
                fi
             done < <(git ls-files -- './public/locales/*.json')                    
